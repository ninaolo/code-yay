{"path":"blog","templateID":4,"sharedPropsHashes":{},"localProps":{"posts":[{"title":"Deploy a react-static site to Github pages","date":"2018-09-18T18:45:00.000Z","slug":"deploy-react-static-site-to-gh-pages","contents":"<p>Hello!</p>\n<p>Having problems deploying your <code>react-static</code> app to Github pages? In this blog post I’ll show you a basic boilerplate \nexample. The code for this blog post can be found \nhere: <a href=\"https://github.com/ninaolo/react-static-github-pages-example\">https://github.com/ninaolo/react-static-github-pages-example</a>.</p>\n<h3 id=\"step-1-set-up-template-app\">Step 1: Set up template app</h3>\n<p>Go to <a href=\"https://github.com/nozzle/react-static\">https://github.com/nozzle/react-static</a> and follow the instructions on how to set up a basic app from one of \ntheir templates. I chose the <a href=\"https://github.com/nozzle/react-static/tree/master/examples/basic\">basic</a> template.</p>\n<h3 id=\"step-2-add-deploy-script\">Step 2: Add deploy script</h3>\n<p>To deploy this to github pages easily, you can create an npm command.</p>\n<pre><code class=\"lang-bash\">npm install --save-dev gh-pages\n</code></pre>\n<p>Then add the following to your <code>package.json</code> under <code>scripts</code>:</p>\n<pre><code class=\"lang-json\">{\n    // Some other stuff..\n\n    &quot;scripts&quot;: {\n        // Other scripts here...\n        &quot;predeploy&quot;: &quot;npm run build&quot;,\n        &quot;deploy&quot;: &quot;gh-pages -d dist&quot;\n    }\n}\n</code></pre>\n<h3 id=\"step-3-deploy\">Step 3: Deploy</h3>\n<p>You can now try deploying you app and see it live at <a href=\"\">https://yourusername.github.io/repositoryname</a>.</p>\n<p>Run:</p>\n<pre><code class=\"lang-bash\">npm run deploy\n</code></pre>\n<p>However, if you click one of the links (<code>Blog</code> for example) the path won’t be relative to your base path, and you’ll \nget a 404 error. Also, the app won’t be styled at all because it will fail to fetch the resources (due to the same \nrelative path issue).</p>\n<p><img src=\"/deploy-react-static-site-to-gh-pages-1.png\" height=\"200px\" title=\"Not working\"/></p>\n<h3 id=\"step-4-fix-routing-issue\">Step 4: Fix routing issue</h3>\n<p>The solution is to add the following to your <code>static.config.js</code> file in the root directory:</p>\n<pre><code>export default {\n    siteRoot: &quot;https://yourusername.github.io&quot;,\n    basePath: &quot;repositoryname&quot;,\n\n    // Other configs...\n</code></pre><h3 id=\"step-5-yay-it-works-\">Step 5: Yay it works!</h3>\n<p>Now you can try to run the deploy again, and you’ll see that the problem is solved. You might need to run a hard reload \nin the browser to clear the cache and see the changes. And voilà, it works!</p>\n<p><img src=\"/deploy-react-static-site-to-gh-pages-2.png\" height=\"200px\" title=\"Working!\"/></p>\n"},{"title":"How to fetch information from your Telldus sensor with NodeJS via Telldus Live API","date":"2018-09-17T15:00:00.000Z","slug":"how-to-connect-telldus-sensor","contents":"<h3 id=\"getting-started\">Getting started</h3>\n<p>Do you have a Telldus sensor and a Telldus account? Do you want to fetch information from the sensor and do fun stuff with that information?</p>\n<p>Then read on! Teach you, I will.</p>\n<p><img src=\"https://media.giphy.com/media/Dea0leKapJzJC/giphy.gif\" alt=\"cats\"></p>\n<p>Perhaps you have visited the <a href=\"http://api.telldus.com/documentation/live\">Telldus API documentation</a> page. I’m sorry all Telldus people out there, but that documentation is awful.</p>\n<p>I’ll show you the basic requests which can be done and also how you could implement that in NodeJS. We have a few endpoints to choose from.</p>\n<pre><code class=\"lang-bash\">https://api.telldus.com/json/devices/list\nhttps://api.telldus.com/json/device/info?id=12345\nhttps://api.telldus.com/json/sensors/list\nhttps://api.telldus.com/json/sensor/info?id=12345\nhttps://api.telldus.com/json/events/list\n...\n</code></pre>\n<p>But first, let’s start a little NodeJS application.</p>\n<pre><code class=\"lang-bash\">mkdir my-telldus-app\ncd my-telldus-app\nnpm init\nnpm install express oauth body-parser --save\ntouch index.js\ntouch api.js\n</code></pre>\n<p>Okay, nice, now we have an app with some basic dependencies with an entry point <code>index.js</code>.</p>\n<p>Add the following to <code>index.js</code>:</p>\n<pre><code class=\"lang-javascript\">const express = require(&quot;express&quot;);\nconst app = express();\n\n// This is the API.\napp.use(require(&quot;./api&quot;));\n\napp.listen(8080);\nconsole.log(&quot;App listening on port 8080&quot;);\n</code></pre>\n<h3 id=\"authenticating-with-oauth\">Authenticating with OAuth</h3>\n<p>Did you see that we required <code>&quot;./api.js&quot;</code> there? We added that file before. That’s where we’ll write our backend API routes, so that these can be queried by our frontend later.</p>\n<pre><code class=\"lang-javascript\">const express = require(&quot;express&quot;);\nconst router = express.Router();\nconst OAuth = require(&quot;oauth&quot;);\n\n// Add your own info here. You can get your keys when you login to Telldus.\nconst publicKey = &quot;&quot;;\nconst privateKey = &quot;&quot;;\nconst token = &quot;&quot;;\nconst secret = &quot;&quot;;\nbase = &quot;https://api.telldus.com/json&quot;;\n\n// You will add code here later.\n\nmodule.exports = router;\n</code></pre>\n<p>Now we need to authenticate with OAuth. Add a function to <code>api.js</code>:</p>\n<pre><code class=\"lang-javascript\">function getOauth() {\n    return new OAuth.OAuth(\n        base + &quot;/oauth/requestToken&quot;,\n        base + &quot;/oauth/accessToken&quot;,\n        publicKey, privateKey, &quot;1.0&quot;, null, &quot;HMAC-SHA1&quot;);\n}\n</code></pre>\n<p>That will take care of the OAuth authentication for us, so we’re ready to write our first Telldus API call.</p>\n<h3 id=\"making-api-calls\">Making API calls</h3>\n<pre><code class=\"lang-javascript\">router.get(&quot;/devices/list&quot;, function (request, response) {\n        getOauth().get(\n            base + &quot;/devices/list&quot;,\n            token,\n            secret,\n            function (error, data, res) {\n                if (error) console.error(error);\n                const jsonData = JSON.parse(data);\n                console.log(jsonData);\n                response.send(jsonData);\n            });\n    }\n);\n</code></pre>\n<p>Now, open your browser and go to <code>http://localhost:8080/devices/list</code>. If it worked, you’ll see an API response!</p>\n<p><img src=\"https://media.giphy.com/media/5wWf7H0WTquIU1DFY4g/giphy.gif\" alt=\"yay\"></p>\n"},{"title":"First Blog Post","date":"2018-09-16T21:29:00.000Z","slug":"first-post","contents":"<p>Hello there! This is the first blog post of this blog.</p>\n<p>I think I’ll mostly write about code, and stuff. Should be fun! Stay tuned.</p>\n<p><img src=\"https://media.giphy.com/media/3oKIPnAiaMCws8nOsE/giphy.gif\" alt=\"code\"></p>\n"}]}}
