{"path":"learn/languages/java/java-sort","templateID":2,"sharedPropsHashes":{},"localProps":{"node":{"text":"Sorting","slug":"java-sort","fullPath":"/learn/languages/java/java-sort","content":{"title":"Sorting in Java","slug":"java-sort","contents":"<h3 id=\"arrays-lambda\">Arrays &amp; Lambda</h3>\n<pre><code class=\"lang-java\">Meeting[] meetings = new Meeting[] {new Meeting(3, 4), new Meeting(5, 7), new Meeting(4, 6)};\nList&amp;lt;Meeting&amp;gt; meetingsList = Arrays.asList(new Meeting(3, 4), new Meeting(5, 7), new Meeting(4, 6));\n\n// Sort by start time of meeting with lambda expression sort.\nArrays.sort(meetings, (Meeting o1, Meeting o2) -&gt; o1.start - o2.start);\nCollections.sort(meetingsList, (Meeting o1, Meeting o2) -&gt; o1.start - o2.start);\n\n// Alternatively skip the Collections sort and use the List instead.\nmeetingsList.sort((o1, o2) -&gt; o1.start - o2.start);\n</code></pre>\n<h3 id=\"comparator\">Comparator</h3>\n<pre><code class=\"lang-java\">Meeting[] meetings = new Meeting[] {new Meeting(3, 4), new Meeting(5, 7), new Meeting(4, 6)};\nList&amp;lt;Meeting&amp;gt; meetingsList = Arrays.asList(new Meeting(3, 4), new Meeting(5, 7), new Meeting(4, 6));\n\n// Sort by start time of meeting with Comparator anonymous class.\nArrays.sort(meetings, new Comparator&amp;lt;Meeting&amp;gt;() {\n    @Override public int compare(Meeting o1, Meeting o2) {\n        return o1.start - o2.start;\n    }\n});\n\n// Sort by start time of meeting with Comparator anonymous class.\nCollections.sort(meetingsList, new Comparator&amp;lt;Meeting&amp;gt;() {\n    @Override public int compare(Meeting o1, Meeting o2) {\n        return o1.start - o2.start;\n    }\n});\n</code></pre>\n"}}}}
