{"path":"learn/languages/java/java-quick-questions","templateID":2,"sharedPropsHashes":{},"localProps":{"node":{"text":"Quick questions","slug":"java-quick-questions","fullPath":"/learn/languages/java/java-quick-questions","content":{"title":"Quick Java questions","slug":"java-quick-questions","contents":"<h3 id=\"what-is-the-difference-between-creating-a-string-with-new-or-with-a-string-literal-\">What is the difference between creating a String with new() or with a String literal (“”)?</h3>\n<ul>\n<li>new() –&gt; heap</li>\n<li>String literal –&gt; String pool</li>\n</ul>\n<p>The String pool is a part of the heap. Strings there are re-used.</p>\n<pre><code class=\"lang-java\">    String s1 = &quot;string pool test&quot;;\n    String s2 = &quot;string pool test&quot;;\n    String s3 = new String(&quot;string pool test&quot;);\n\n    boolean pool = (s1 == s2); // true\n    boolean heap = (s1 == s3); // false\n</code></pre>\n<h3 id=\"stringbuffer-vs-stringbuilder\">StringBuffer vs StringBuilder</h3>\n<p>Both are used when we want to modify Strings a lot, which is not optimal with String objects since they are\nimmutable.</p>\n<p>StringBuilder –&gt; faster and the “first choice”.\nStringBuffer –&gt; slower, but use this if you have concurrency issues.</p>\n<h3 id=\"arraylist-vs-vector\">ArrayList vs Vector</h3>\n<p>Concurrency –&gt; Vector is synchronized, ArrayList not.\nPerformance –&gt; Vector is slow, ArrayList faster.\nCapacity –&gt; Vector increases by 100%, ArrayList by 50%.</p>\n<h3 id=\"arraylist-vector-vs-linkedlist\">ArrayList/Vector vs LinkedList</h3>\n<p>ArrayList/Vector –&gt; when you want to index, O(1), and remove mainly from end, O(N - i).\nLinkedList –&gt; when you want to remove from anywhere, O(1), and not index so much, O(i).</p>\n<h3 id=\"implement-hashcode\">Implement hashCode</h3>\n<pre><code class=\"lang-java\">public class Student {\n    boolean isCool;\n    int age;\n    String name;\n\n    @Override\n    public int hashCode() {\n        int prime = 31;\n        int result = age;\n        result = prime * result + (name != null ? name.hashCode() : 0);\n        result = prime * result + (isCool ? 1 : 0);\n        return result;\n    }\n}\n</code></pre>\n<pre><code class=\"lang-java\">public class Student {\n    boolean isCool;\n    int age;\n    String name;\n\n    @Override\n    public int hashCode() {\n        HashCodeBuilder builder = new HashCodeBuilder();\n        builder.append(isCool);\n        builder.append(age);\n        builder.append(name);\n        return builder.toHashCode();\n    }\n}\n</code></pre>\n<h3 id=\"what-do-the-different-access-modifiers-do-\">What do the different Access Modifiers do?</h3>\n<p>public –&gt; any class can use.\nprotected –&gt; classes in the same package and subclasses in any package can use.\nprivate –&gt; only this class can use.\nno modifier (“package private”) –&gt; only classes in the same package can use.</p>\n<h3 id=\"which-access-modifier-should-you-use-if-only-subclasses-should-have-access-\">Which Access Modifier should you use if only subclasses should have access?</h3>\n<p>Use protected and have a separate package for the class hierarchy.</p>\n<h3 id=\"what-is-a-checked-exception-\">What is a checked exception?</h3>\n<p>Usually caused by user error or a problem that can’t be foreseen by the programmer.\nAny subclass of Exception except for RuntimeException.\nMust be surrounded by try/catch or declared by throws.</p>\n<h3 id=\"what-is-an-unchecked-exception-\">What is an unchecked exception?</h3>\n<p>Programming error.\nAny subclass of RuntimeException.\nCan be surrounded by try/catch or declared by throws but this isn’t necessary.</p>\n<h3 id=\"give-an-example-usage-of-finally\">Give an example usage of finally</h3>\n<p>Usually for cleanup, such as closing sockets, db connections etc.</p>\n<h3 id=\"how-can-you-create-concurrent-threads-in-java-\">How can you create concurrent threads in Java?</h3>\n<pre><code class=\"lang-java\">TestRunnable a = new TestRunnable(&quot;A&quot;);\nTestRunnable b = new TestRunnable(&quot;B&quot;);\nTestRunnable c = new TestRunnable(&quot;C&quot;);\n\na.start();\nb.start();\nc.start();\n</code></pre>\n<h3 id=\"what-class-can-you-use-if-you-want-to-store-unique-objects-in-some-order-\">What class can you use if you want to store unique objects in some order?</h3>\n<p>A TreeSet. No duplicates are stored and they are ordered with respect to compareTo().</p>\n<h3 id=\"what-is-a-final-class-method-\">What is a final class/method?</h3>\n<p>Final class –&gt; can’t have subclasses.\nFinal method –&gt; can’t be overridden.</p>\n"}}}}
