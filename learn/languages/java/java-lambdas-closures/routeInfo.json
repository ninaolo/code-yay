{"path":"learn/languages/java/java-lambdas-closures","templateID":2,"sharedPropsHashes":{},"localProps":{"node":{"text":"Lambdas/closures","slug":"java-lambdas-closures","fullPath":"/learn/languages/java/java-lambdas-closures","content":{"title":"Java lambdas vs. closures","slug":"java-lambdas-closures","contents":"<h3 id=\"lambdas-vs-closures\">Lambdas vs. closures</h3>\n<p>A closure = function that keeps a private state and can be passed around. For example, JavaScript has closures. Lambda = function that can be created at runtime and can change a private state.</p>\n<p>Difference = lambdas can’t modify variables defined in the outer closure (such code gives compile errors). A workaround is to wrap variables you want to modify in a class. However, if you have concurrency there’s an issue with the modifiable shared state.</p>\n<h3 id=\"example-of-compile-error-variable-used-in-lambda-expression-should-be-final-or-effectively-final-\">Example of compile error (“Variable used in lambda expression should be final or effectively final”):</h3>\n<pre><code class=\"lang-java\">public class Codeyay {\n\nprivate static Function&amp;lt;Integer, Integer&amp;gt; makeFunction() {\n    int n = 0; // Outside the lambda scope.\n\n    return arg -&gt; {\n        System.out.print(n + &quot; &quot; + arg + &quot;: &quot;);\n        arg += 1;\n        n += arg; // This does not compile!\n        return n + arg;\n        };\n    }\n}\n</code></pre>\n<h3 id=\"example-of-workaround-which-does-compile-\">Example of workaround which does compile:</h3>\n<pre><code class=\"lang-java\">class MyInt {\n    int n = 0;\n}\n\npublic class Codeyay {\n\n    private static Function&amp;lt;Integer, Integer&amp;gt; makeFunction() {\n        final MyInt myInt = new MyInt(); // Outside the lambda scope.\n\n        return arg -&gt; {\n            System.out.print(myInt.n + &quot; &quot; + arg + &quot;: &quot;);\n            arg += 1;\n            myInt.n += arg; // This is fine.\n            return myInt.n + arg;\n        };\n    }\n\n    public static void tryLambdas() {\n        Function&amp;lt;Integer, Integer&amp;gt; x = makeFunction();\n        Function&amp;lt;Integer, Integer&amp;gt; y = makeFunction();\n\n        for (int i = 0; i &lt; 5; i++) {\n            System.out.println(x.apply(i));\n        }\n\n        for (int i = 0; i &lt; 3; i++) {\n            System.out.println(y.apply(i));\n        }\n    }\n\n    public static void main(String[] args) {\n        tryLambdas();\n    }\n}\n</code></pre>\n"}}}}
