{"template":"/Users/Nina/git/code-yay/src/components/LearnNode.tsx","sharedHashesByProp":{},"data":{"node":{"text":"Backtracking","slug":"backtracking","fullPath":"/learn/concepts/backtracking","content":{"title":"Backtracking","slug":"backtracking","what":"Using recursion (or stack) to examine all possible solutions/paths in a problem. If you reach a dead end, you backtrack (go back) to a previous state.","contents":"<h3 id=\"example-find-a-word-in-a-matrix\">Example: find a word in a matrix</h3>\n<p>Let&#39;s say we have a matrix with chars and we want to find a certain word. A backtracking algorithm could step through\nthe matrix and look for paths, and if the path comes to an end, it backtracks to look for other possibilities.</p>\n<pre><code class=\"language-java\">public class WordSearchMatrix {\n\n    private char[][] matrix;\n    private int N;\n    private char[][] solution;\n    private int path;\n\n    public WordSearchMatrix(char[][] matrix) {\n        this.matrix = matrix;\n        this.N = matrix.length;\n    }\n\n    public Optional&amp;lt;int[][]&amp;gt; searchWord(String searchWord) {\n        solution = new char[N][N];\n        path = 1;\n        word = searchWord;\n\n        // Go through entire matrix.\n        for (int row = 0; row &lt; N; row++) {\n            for (int col = 0; col &lt; N; col++) {\n\n                // Note: charIndex is always 0 here because at this step we&#39;re always at the beginning\n                // and findSolution does the recursive part.\n                if (findSolution(int row, int col, 0)) {\n                    return solution;\n                }\n            }\n        }\n        return Optional.empty();\n    }\n\n    private boolean findSolution(int row, int col, int charIndex) {\n\n        // If current cell is already visited or doesn&#39;t contain the correct char, then no solution here.\n        if (solution[row][col] != 0 || matrix[row][col] != word.charAt(charIndex)) {\n            return false;\n        }\n\n        // If we&#39;re at the last charIndex and it contains the correct char, we have a solution.\n        if (charIndex == word.length() - 1) {\n            solution[row][col] = path++;\n            return true;\n        }\n\n        // We found a correct char. Let&#39;s continue.\n        charIndex++;\n        solution[row][col] = path++;\n\n        // Go down.\n        if (row + 1 &lt; N &amp;&amp; findSolution(row + 1, col, charIndex)) {\n            return true;\n        }\n\n        // Go up.\n        if (row - 1 &gt;= 0 &amp;&amp; search(row - 1, col, charIndex)) {\n            return true;\n        }\n\n        // Go right.\n        if (col + 1 &lt; N &amp;&amp; search(row, col + 1, charIndex)) {\n            return true;\n        }\n\n        // Go left.\n        if (col - 1 &gt;= 0 &amp;&amp; search(row, col - 1, charIndex)) {\n            return true;\n        }\n\n        // Go diagonally up right.\n        if (row - 1 &gt;= 0 &amp;&amp; col + 1 &lt; N &amp;&amp; search(row - 1, col + 1, charIndex)) {\n            return true;\n        }\n\n        // Go diagonally up left.\n        if (row - 1 &gt;= 0 &amp;&amp; col - 1 &gt;= 0 &amp;&amp; search(row - 1, col - 1, charIndex)) {\n            return true;\n        }\n\n        // Go diagonally down left.\n        if (row + 1 &lt; N &amp;&amp; col - 1 &gt;= 0 &amp;&amp; search(row + 1, col - 1, charIndex)) {\n            return true;\n        }\n\n        // Go diagonally down right.\n        if (row + 1 &lt; N &amp;&amp; col + 1 &lt; N &amp;&amp; search(row + 1, col + 1, charIndex)) {\n            return true;\n        }\n\n        // If none of the above steps worked out --&gt; BACKTRACK.\n        path--;\n        solution[row][col] = 0;\n        return false;\n    }\n}</code></pre>\n"}}},"path":"learn/concepts/backtracking"}
