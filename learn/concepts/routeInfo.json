{"path":"learn/concepts","templateID":2,"sharedPropsHashes":{},"localProps":{"node":{"route":"concepts","text":"Concepts","children":[{"text":"Backtracking","slug":"backtracking","fullPath":"/learn/concepts/backtracking","content":{"title":"Backtracking","slug":"backtracking","what":"Using recursion (or stack) to examine all possible solutions/paths in a problem. If you reach a dead end, you backtrack (go back) to a previous state.","contents":"<h3 id=\"example-find-a-word-in-a-matrix\">Example: find a word in a matrix</h3>\n<p>Let’s say we have a matrix with chars and we want to find a certain word. A backtracking algorithm could step through\nthe matrix and look for paths, and if the path comes to an end, it backtracks to look for other possibilities.</p>\n<pre><code class=\"lang-java\">public class WordSearchMatrix {\n\n    private char[][] matrix;\n    private int N;\n    private char[][] solution;\n    private int path;\n\n    public WordSearchMatrix(char[][] matrix) {\n        this.matrix = matrix;\n        this.N = matrix.length;\n    }\n\n    public Optional&amp;lt;int[][]&amp;gt; searchWord(String searchWord) {\n        solution = new char[N][N];\n        path = 1;\n        word = searchWord;\n\n        // Go through entire matrix.\n        for (int row = 0; row &lt; N; row++) {\n            for (int col = 0; col &lt; N; col++) {\n\n                // Note: charIndex is always 0 here because at this step we&#39;re always at the beginning\n                // and findSolution does the recursive part.\n                if (findSolution(int row, int col, 0)) {\n                    return solution;\n                }\n            }\n        }\n        return Optional.empty();\n    }\n\n    private boolean findSolution(int row, int col, int charIndex) {\n\n        // If current cell is already visited or doesn&#39;t contain the correct char, then no solution here.\n        if (solution[row][col] != 0 || matrix[row][col] != word.charAt(charIndex)) {\n            return false;\n        }\n\n        // If we&#39;re at the last charIndex and it contains the correct char, we have a solution.\n        if (charIndex == word.length() - 1) {\n            solution[row][col] = path++;\n            return true;\n        }\n\n        // We found a correct char. Let&#39;s continue.\n        charIndex++;\n        solution[row][col] = path++;\n\n        // Go down.\n        if (row + 1 &lt; N &amp;&amp; findSolution(row + 1, col, charIndex)) {\n            return true;\n        }\n\n        // Go up.\n        if (row - 1 &gt;= 0 &amp;&amp; search(row - 1, col, charIndex)) {\n            return true;\n        }\n\n        // Go right.\n        if (col + 1 &lt; N &amp;&amp; search(row, col + 1, charIndex)) {\n            return true;\n        }\n\n        // Go left.\n        if (col - 1 &gt;= 0 &amp;&amp; search(row, col - 1, charIndex)) {\n            return true;\n        }\n\n        // Go diagonally up right.\n        if (row - 1 &gt;= 0 &amp;&amp; col + 1 &lt; N &amp;&amp; search(row - 1, col + 1, charIndex)) {\n            return true;\n        }\n\n        // Go diagonally up left.\n        if (row - 1 &gt;= 0 &amp;&amp; col - 1 &gt;= 0 &amp;&amp; search(row - 1, col - 1, charIndex)) {\n            return true;\n        }\n\n        // Go diagonally down left.\n        if (row + 1 &lt; N &amp;&amp; col - 1 &gt;= 0 &amp;&amp; search(row + 1, col - 1, charIndex)) {\n            return true;\n        }\n\n        // Go diagonally down right.\n        if (row + 1 &lt; N &amp;&amp; col + 1 &lt; N &amp;&amp; search(row + 1, col + 1, charIndex)) {\n            return true;\n        }\n\n        // If none of the above steps worked out --&gt; BACKTRACK.\n        path--;\n        solution[row][col] = 0;\n        return false;\n    }\n}\n</code></pre>\n"}},{"text":"Greedy","slug":"greedy","fullPath":"/learn/concepts/greedy","content":{"title":"Greedy","slug":"greedy","contents":"<p>More information coming!</p>\n"}},{"text":"Memoization","slug":"memoization","fullPath":"/learn/concepts/memoization","content":{"title":"Memoization","slug":"memoization","what":"DP --> Solve problems recursively when computations of subproblems overlap. Memoization --> Memorizing sub problems to avoid recomputing them.","contents":"<h3 id=\"example-calculate-n-th-fibonacci-number\">Example: calculate n’th fibonacci number</h3>\n<p>To calculate fibonacci(n) we need fibonacci(n-1) + fibonacci(n-2) –&gt; leads to a lot of unnecessary recomputing.\nWe must use memoization! If we try to compute the 50th fibonacci nr with the slow and the fast one, we see a\nhuge difference in running time.</p>\n<pre><code class=\"lang-java\">public class Coderview {\n    public static int fibonacci(int n) {\n        return n &lt; 2 ? n : fibonacci(n-1) + fibonacci(n-2);\n    }\n}\n</code></pre>\n<pre><code class=\"lang-java\">public class Coderview {\n\n    private static Map&amp;lt;Integer, Long&amp;gt; cache = new HashMap&lt;&gt;();\n\n    public static long fibonacci(int n) {\n        if (n &lt; 2) {\n            return n;\n        }\n\n        Long value = cache.get(n);\n\n        if (value == null) {\n            value = fibonacci(n-1) + fibonacci(n-2);\n            cache.put(n, value);\n        }\n\n        return value;\n    }\n}\n</code></pre>\n"}},{"text":"Recursion","slug":"recursion","fullPath":"/learn/concepts/recursion","content":{"title":"Recursion","slug":"recursion","what":"A function being defined is applied within its own definition. Or in other words, recursion is when a function calls itself.","contents":"<h3 id=\"good\">Good</h3>\n<p>Elegant, simple. Some languages are well suited for it. Instead of the call stack being a problem, you can\nactually take advantage of it in a clever way by doing iterative branching –&gt; for example call a function\nmultiple times in same loop but with different parameters, that’s branching. If you try an iterative solution,\nyou often need a stack and you re-invent the wheel.</p>\n<h3 id=\"bad\">Bad</h3>\n<p>In most languages it’s bad, because of Stack Overflow issues + it also takes some time to copy stuff to stack etc.\nso it will run slower due to function call overhead.</p>\n<h3 id=\"time-complexity\">Time Complexity</h3>\n<ul>\n<li>Simple way: compute by reasoning about how many times function will be called.</li>\n<li>More difficult cases: use Master Theorem or guess and use induction. Example: recursive fibonacci –&gt; T(n-1) + T(n-2) + T(1) –&gt; O(fib(n)) ~= O(1.6^n)</li>\n</ul>\n<h3 id=\"examples-of-time-complexity\">Examples of Time Complexity</h3>\n<pre><code class=\"lang-java\">\n// O(N/3) = O(N)\nint function1(int n) {\n    if (n &lt;= 0) {\n        return 1;\n    } else {\n        return 1 + recursiveFun1(n-3);\n    }\n}\n\n// O(log4 N) = O(log N)\nint function2(int n) {\n    if (n &lt;= 0) {\n        return 1;\n    } else {\n        return 1 + function2(n/4);\n    }\n}\n\n// O(2^N) --&gt; Think of this as a binary tree with height N.\nint function3(int n) {\n    if (n &lt;= 0) {\n        return 1;\n    } else {\n        function3(n - 1);\n        function3(n - 1);\n    }\n}\n\n// ???\nint function4(int n) {\n    for (i = 0; i &lt; n; i += 2) {\n        System.out.println(&quot;Hello&quot;);\n    }\n\n    if (n &lt;= 0) {\n        return 1;\n    } else {\n        return 1 + function4(n-5);\n    }\n}\n</code></pre>\n"}},{"text":"Tabulation","slug":"tabulation","fullPath":"/learn/concepts/tabulation","content":{"title":"Tabulation","slug":"tabulation","what":"A method for constructing universal families of hash functions by combining table lookup with exclusive OR operations.","contents":"<p>More information is coming!</p>\n"}}],"fullPath":"/learn/concepts"}}}
