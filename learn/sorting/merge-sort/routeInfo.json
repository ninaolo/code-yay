{"path":"learn/sorting/merge-sort","templateID":2,"sharedPropsHashes":{},"localProps":{"node":{"text":"Merge sort","slug":"merge-sort","fullPath":"/learn/sorting/merge-sort","content":{"title":"Merge sort","slug":"merge-sort","what":"Divide-and-conquer algorithm that sorts by repeatedly dividing the list in two and then merging the two sub-lists. Usually implemented with array copies and therefore takes up some extra space.","how":"Split list in two | Recursively sort left part | Recursively sort right part | Merge","bestTime":"O(N log N)","averageTime":"O(N log N)","worstTime":"O(N log N)","space":"O(N) for extra storage","contents":"<h3 id=\"implementation\">Implementation</h3>\n<pre><code class=\"lang-java\">public class Codeyay {\n\n    private static void merge(Comparable[] left, Comparable[] right, Comparable[] list) {\n\n        // Define the indexes.\n        int iLeft = 0;\n        int iRight = 0;\n        int iList = 0;\n\n        // Loop and copy the smallest element each time from left/right list.\n        while (iLeft &lt; left.length &amp;&amp; iRight &lt; right.length) {\n            if (left[iLeft].compareTo(right[iRight]) &lt; 0) {\n                list[iList] = left[iLeft];\n                iLeft++;\n            } else {\n                list[iList] = right[iRight];\n                iRight++;\n            }\n            iList++;\n        }\n\n        // Copy elements that are left.\n        System.arraycopy(left, iLeft, list, iList, left.length - iLeft);\n        System.arraycopy(right, iRight, list, iList, right.length - iRight);\n    }\n\n    public static void mergeSort(Comparable[] list) {\n\n        // Base case - otherwise infinite recursion.\n        if (list.length == 1) {\n            return;\n        }\n\n        // Split in two, creating two new lists in memory and copying the elements.\n        Comparable[] left = new Comparable[list.length / 2];\n        Comparable[] right = new Comparable[list.length - left.length];\n        System.arraycopy(list, 0, left, 0, left.length);\n        System.arraycopy(list, left.length, right, 0, right.length);\n\n        // Recursively sort both halves.\n        mergeSort(left);\n        mergeSort(right);\n\n        // Merge the two sorted parts.\n        merge(left, right, list);\n    }\n}\n</code></pre>\n"}}}}
