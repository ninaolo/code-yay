{"path":"learn/sorting/quick-sort","templateID":2,"sharedPropsHashes":{},"localProps":{"node":{"text":"Quick sort","slug":"quick-sort","fullPath":"/learn/sorting/quick-sort","content":{"title":"Quick sort","slug":"quick-sort","what":"Divide-and-conquer algorithm that sorts with the help of a pivot value.","how":"Choose pivot | Move small values to the left of pivot, greater to the right | Recursively sort left and right part","averageTime":"O(N log N)","bestTime":"O(N log N)","worstTime":"O(N^2) for example if first element is pivot in already sorted list","space":"O(log N) for recursion","contents":"<h3 id=\"implementation\">Implementation</h3>\n<pre><code class=\"lang-java\">public class Codeyay {\n\n    private static void swap(int iFirst, int iSecond, Comparable[] list) {\n        Comparable tmp = list[iFirst];\n        list[iFirst] = list[iSecond];\n        list[iSecond] = tmp;\n    }\n\n    private static int getAndPlacePivot(Comparable[] list, int iLeft, int iRight) {\n\n        // Choose last element as pivot. Any element could be chosen, but this is one strategy.\n        Comparable pivot = list[iRight];\n\n        // Keep track of the last seen small value (smaller than pivot).\n        int iLastSmall = iLeft - 1;\n\n        // Step forward. If high value, do nothing. If low value, swap low to the left side.\n        for (int iCurrent = iLeft; iCurrent &lt; iRight; iCurrent++) {\n            if (list[iCurrent].compareTo(pivot) &lt;= 0) {\n                swap(iLastSmall + 1, iCurrent, list);\n                iLastSmall++;\n            }\n        }\n\n        // Swap the first high value with the pivot, putting it into the right position.\n        swap(iLastSmall + 1, iRight, list);\n        return iLastSmall + 1;\n    }\n\n    public static void quickSort(Comparable[] list, int iLeft, int iRight) {\n\n        // Base case - otherwise infinite recursion.\n        if (iLeft &gt;= iRight) {\n            return;\n        }\n\n        // Get pivot index at correct place in list (smaller to the left and greater to the right).\n        int iPivot = getAndPlacePivot(list, iLeft, iRight);\n\n        // Recursively sort elements to the left and right side of the iPivot.\n        quickSort(list, iLeft, iPivot - 1);\n        quickSort(list, iPivot + 1, iRight);\n    }\n}\n</code></pre>\n"}}}}
