{"path":"learn/sorting/bubble-sort","templateID":3,"sharedPropsHashes":{},"localProps":{"node":{"text":"Bubble sort","slug":"bubble-sort","fullPath":"/learn/sorting/bubble-sort","content":{"title":"Bubble sort","slug":"bubble-sort","what":"A very simple sorting algorithm using double for-loops. It's slow and has a quite na√Øve approach.","how":"For every element... | For every pair of elements... | If left is greater than right - swap","contents":"<h3 id=\"implementation\">Implementation</h3>\n<pre><code class=\"lang-java\">public class Codeyay {\n\n    private static void swap(int iFirst, int iSecond, Comparable[] list) {\n        Comparable tmp = list[iFirst];\n        list[iFirst] = list[iSecond];\n        list[iSecond] = tmp;\n    }\n\n    public static void bubbleSort(Comparable[] list) {\n\n        // Traverse list. For every element, traverse list with swapping pairs.\n        // Note that iTraverse stops before last element and iPair goes to the last element.\n        for (int iTraverse = 0; iTraverse &lt; list.length - 1; iTraverse++) {\n            for (int iPair = 1; iPair &lt; list.length; iPair++) {\n\n                // Swap if left &gt; right.\n                if (list[iPair - 1].compareTo(list[iPair]) &gt; 0) {\n                    swap(iPair - 1, iPair, list);\n                }\n            }\n        }\n    }\n}\n</code></pre>\n"}}}}
