{"path":"learn/sorting/heap-sort","templateID":2,"sharedPropsHashes":{},"localProps":{"node":{"text":"Heap sort","slug":"heap-sort","fullPath":"/learn/sorting/heap-sort","content":{"title":"Heap sort","slug":"heap-sort","what":"Sorts by using a heap. The input array can be used as the actual heap --> no additional storage.","how":"Turn array into max-heap --> O(N) | Swap root N times with last element & make sure new root comes to right place --> O(N log N)","bestTime":"O(N + N log N) = O(N log N)","averageTime":"O(N + N log N) = O(N log N)","worstTime":"O(N + N log N) = O(N log N)","space":"O(1)","contents":"<h3 id=\"implementation\">Implementation</h3>\n<pre><code class=\"lang-java\">public class Codeyay {\n\n    public static void heapSort(Comparable[] array) {\n        int n = array.length;\n\n        // STEP 1: build heap bottom-up (begin at lowest level with children) --&gt; O(N).\n        for (int i = n / 2 - 1; i &gt;= 0; i--) {\n            heapify(array, i, n);\n        }\n\n        // STEP 2: swap max root with last child, heapify on the smaller heap --&gt; O(N log N).\n        for (int iLast = n - 1; iLast &gt;= 0; iLast--) {\n            swap(0, iLast, array);\n            heapify(array, 0, iLast);\n        }\n    }\n\n    private static void heapify(Comparable[] array, int iSubRoot, int heapSize) {\n        int iLeft = iSubRoot * 2 + 1;\n        int iRight = iSubRoot * 2 + 2;\n        int iLargest = iSubRoot;\n\n        if (iLeft &lt; heapSize &amp;&amp; array[iLeft].compareTo(array[iLargest]) &gt; 0) {\n            iLargest = iLeft;\n        }\n\n        if (iRight &lt; heapSize &amp;&amp; array[iRight].compareTo(array[iLargest]) &gt; 0) {\n            iLargest = iRight;\n        }\n\n        if (iLargest != iSubRoot) {\n            swap(iLargest, iSubRoot, array);\n\n            // Recursively heapify the new subtree.\n            heapify(array, iLargest, heapSize);\n        }\n    }\n\n    private static void swap(int iFirst, int iSecond, Comparable[] array) {\n        Comparable tmp = array[iFirst];\n        array[iFirst] = array[iSecond];\n        array[iSecond] = tmp;\n    }\n}\n</code></pre>\n"}}}}
