{"path":"learn/problems/linked-list/linked-list-cycle","templateID":2,"sharedPropsHashes":{},"localProps":{"node":{"text":"Cycle","slug":"linked-list-cycle","fullPath":"/learn/problems/linked-list/linked-list-cycle","content":{"title":"Detect a cycle in a linked list","slug":"linked-list-cycle","contents":"<h3 id=\"okay-solution\">Okay solution</h3>\n<p>Go through list one by one and check if already visited with a HashSet.</p>\n<p>Complexity –&gt; O(N) time and O(N) space.</p>\n<h3 id=\"best-solution\">Best solution</h3>\n<p>Go through list with fast and slow runner. Slow runner takes one node at a time, fast takes two. If fast catches up with slow, it’s a cycle. If fast comes to the end (null), it’s not a cycle.</p>\n<p>Complexity –&gt; O(N) time and O(1) space.</p>\n<pre><code class=\"lang-java\">public class Codeyay {\n\n    public static boolean hasCycle(Node startNode) {\n        Set&amp;lt;Integer&amp;gt; visited = new HashSet&lt;&gt;();\n\n        Node current = startNode;\n        while (current.getNext() != null) {\n            if (visited.contains(current.getId())) {\n                return true;\n            }\n\n            visited.add(current.getId());\n            current = current.getNext();\n        }\n        return false;\n    }\n}\n</code></pre>\n<pre><code class=\"lang-java\">public class Codeyay {\n\n    public static boolean hasCycle(Node startNode) {\n        Node slow = startNode;\n        Node fast = startNode;\n\n        while (fast != null &amp;&amp; fast.getNext() != null) {\n            slow = slow.getNext();\n            fast = fast.getNext().getNext();\n\n            if (fast == slow) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n</code></pre>\n<pre><code class=\"lang-java\">public class Node {\n\n    private final Integer id;\n    private Node next;\n\n    public Node(Integer id) {\n        this.id = id;\n    }\n\n    public Node getNext() {\n        return next;\n    }\n\n    public Integer getId() {\n        return id;\n    }\n}\n</code></pre>\n"}}}}
