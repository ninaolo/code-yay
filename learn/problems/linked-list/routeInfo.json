{"template":"/Users/Nina/git/code-yay/src/containers/Learn.tsx","sharedHashesByProp":{},"data":{"node":{"route":"linked-list","text":"Linked list","children":[{"text":"Cycle","slug":"linked-list-cycle","fullPath":"/learn/problems/linked-list/linked-list-cycle","content":{"title":"Detect a cycle in a linked list","slug":"linked-list-cycle","contents":"<h3 id=\"okay-solution\">Okay solution</h3>\n<p>Go through list one by one and check if already visited with a HashSet.</p>\n<p>Complexity --&gt; O(N) time and O(N) space.</p>\n<h3 id=\"best-solution\">Best solution</h3>\n<p>Go through list with fast and slow runner. Slow runner takes one node at a time, fast takes two. If fast catches up with slow, it&#39;s a cycle. If fast comes to the end (null), it&#39;s not a cycle.</p>\n<p>Complexity --&gt; O(N) time and O(1) space.</p>\n<pre><code class=\"language-java\">public class Codeyay {\n\n    public static boolean hasCycle(Node startNode) {\n        Set&amp;lt;Integer&amp;gt; visited = new HashSet&lt;&gt;();\n\n        Node current = startNode;\n        while (current.getNext() != null) {\n            if (visited.contains(current.getId())) {\n                return true;\n            }\n\n            visited.add(current.getId());\n            current = current.getNext();\n        }\n        return false;\n    }\n}</code></pre>\n<pre><code class=\"language-java\">public class Codeyay {\n\n    public static boolean hasCycle(Node startNode) {\n        Node slow = startNode;\n        Node fast = startNode;\n\n        while (fast != null &amp;&amp; fast.getNext() != null) {\n            slow = slow.getNext();\n            fast = fast.getNext().getNext();\n\n            if (fast == slow) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}</code></pre>\n<pre><code class=\"language-java\">public class Node {\n\n    private final Integer id;\n    private Node next;\n\n    public Node(Integer id) {\n        this.id = id;\n    }\n\n    public Node getNext() {\n        return next;\n    }\n\n    public Integer getId() {\n        return id;\n    }\n}</code></pre>\n"}},{"text":"Delete","slug":"linked-list-delete","fullPath":"/learn/problems/linked-list/linked-list-delete","content":{"title":"Delete a node in a linked list","slug":"linked-list-delete","contents":"<h3 id=\"solution-1-root-is-given-\">Solution #1 (root is given)</h3>\n<p>If root is given, we can loop to the previous node and set its next node to the node after the deleted node. The node will then be garbage collected.</p>\n<p>Bad argument: Delete node doesn&#39;t exist.\nBad argument: Delete node is the only node in the list.\nSpecial case: Delete node is root.</p>\n<h3 id=\"solution-2-root-is-not-given-\">Solution #2 (root is not given)</h3>\n<p>We can only solve this with a more &quot;ugly&quot; solution - we&#39;ll swap Node values. If Node id&#39;s are final, we have to mess up the id&#39;s. If not final, we could swap both values and id&#39;s.</p>\n<p>NOTE: we must assume given node is not the tail.</p>\n<pre><code class=\"language-java\">public class Codeyay {\n\n    public static Node delete(Node root, Node node) {\n\n        // Special case: we want to delete root node.\n        if (node == root) {\n            if (root.getNext() == null) {\n                throw new IllegalArgumentException(&quot;Can&#39;t delete only node in list.&quot;);\n            }\n            Node newRoot = root.getNext();\n            root.setNext(null);\n            return newRoot;\n        }\n\n        // Other case: node is in middle or the last node.\n        Node previous = root;\n        while (previous != null &amp;&amp; previous.getNext() != node) {\n            previous = previous.getNext();\n        }\n\n        if (previous == null) {\n            throw new IllegalArgumentException(&quot;Given node does not exist in list.&quot;);\n        }\n\n        // Node will be garbage collected.\n        previous.setNext(node.getNext());\n        return root;\n    }\n}</code></pre>\n<pre><code class=\"language-java\">public class Codeyay {\n\n    /**\n     * Only handles nodes that aren&#39;t the tail.\n     * Also messes up id&#39;s since it only swaps values, not actual nodes.\n     */\n    public static void delete(Node node) {\n        if (node == null || node.getNext() == null) {\n            throw new IllegalArgumentException(&quot;Bad argument.&quot;);\n        }\n\n        node.setValue(node.getNext().getValue());\n        node.setNext(node.getNext().getNext());\n    }\n}</code></pre>\n<pre><code class=\"language-java\">public class Node {\n\n    private final int id;\n    private Node next;\n    private int value;\n\n    public Node(int id, int value) {\n        this.id = id;\n        this.value = value;\n    }\n\n    public Node getNext() {\n        return next;\n    }\n\n    public void setNext(Node next) {\n        this.next = next;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public int getValue() {\n        return value;\n    }\n\n    public void setValue(int value) {\n        this.value = value;\n    }\n}</code></pre>\n"}},{"text":"Merge","slug":"linked-list-merge","fullPath":"/learn/problems/linked-list/linked-list-merge","content":{"title":"Merge two sorted linked lists","slug":"linked-list-merge","contents":"<h3 id=\"solution-1\">Solution #1</h3>\n<p>Create a dummy node to keep track of start of merged list. Go through both and merge from small to large.</p>\n<h3 id=\"solution-2\">Solution #2</h3>\n<p>Don&#39;t use a dummy and do an initialization step to keep track of return node.</p>\n<h3 id=\"complexity\">Complexity</h3>\n<p>Worst case is O(N) time (N = total nr of nodes) and best case O(1) (when first list has length 1 and second length N-1 - then we just &quot;hang&quot; them onto each other).</p>\n<p>Space is O(1).</p>\n<pre><code class=\"language-java\">public class Codeyay {\n\n    public static Node merge(Node first, Node second) {\n        if (first == null) {\n            return second;\n        } else if (second == null) {\n            return first;\n        }\n\n        // Create dummy node to avoid initializing merged list.\n        Node dummy = new Node(0, 0);\n        Node merged = dummy;\n\n        // Take the smallest node from first/second while none is null.\n        while (first != null &amp;&amp; second != null) {\n            if (first.getValue() &lt; second.getValue()) {\n                merged.setNext(first);\n                first = first.getNext();\n            } else {\n                merged.setNext(second);\n                second = second.getNext();\n        }\n\n            merged = merged.getNext();\n        }\n\n        // Merge the left over nodes.\n        Node  leftOver = first == null ? second : first;\n        merged.setNext(leftOver);\n\n        return dummy.getNext();\n    }\n}</code></pre>\n<pre><code class=\"language-java\">public class Codeyay {\n\n    public static Node merge(Node first, Node second) {\n        if (first == null) {\n            return second;\n        } else if (second == null) {\n            return first;\n        }\n\n        Node merged;\n        Node mergedStart;\n\n        // Initialize the merged list.\n        if (first.getValue() &lt; second.getValue()) {\n            merged = first;\n            first = first.getNext();\n        } else {\n            merged = second;\n            second = second.getNext();\n        }\n\n        mergedStart = merged;\n\n        // Take the smallest node from first/second while none is null.\n        while (first != null &amp;&amp; second != null) {\n            if (first.getValue() &lt; second.getValue()) {\n                merged.setNext(first);\n                first = first.getNext();\n            } else {\n                merged.setNext(second);\n                second = second.getNext();\n            }\n\n            merged = merged.getNext();\n        }\n\n        // Merge the left over nodes.\n        Node  leftOver = first == null ? second : first;\n        merged.setNext(leftOver);\n\n        return mergedStart;\n    }\n}</code></pre>\n<pre><code class=\"language-java\">public class Node {\n\n    private final int id;\n    private Node next;\n    private int value;\n\n    public Node(int id, int value) {\n        this.id = id;\n        this.value = value;\n    }\n\n    public Node getNext() {\n        return next;\n    }\n\n    public void setNext(Node next) {\n        this.next = next;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public int getValue() {\n        return value;\n    }\n\n    public void setValue(int value) {\n        this.value = value;\n    }\n}</code></pre>\n"}}],"fullPath":"/learn/problems/linked-list"}},"path":"learn/problems/linked-list"}
