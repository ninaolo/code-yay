{"path":"learn/problems/linked-list/linked-list-delete","templateID":3,"sharedPropsHashes":{},"localProps":{"node":{"text":"Delete","slug":"linked-list-delete","fullPath":"/learn/problems/linked-list/linked-list-delete","content":{"title":"Delete a node in a linked list","slug":"linked-list-delete","contents":"<h3 id=\"solution-1-root-is-given-\">Solution #1 (root is given)</h3>\n<p>If root is given, we can loop to the previous node and set its next node to the node after the deleted node. The node will then be garbage collected.</p>\n<p>Bad argument: Delete node doesn’t exist.\nBad argument: Delete node is the only node in the list.\nSpecial case: Delete node is root.</p>\n<h3 id=\"solution-2-root-is-not-given-\">Solution #2 (root is not given)</h3>\n<p>We can only solve this with a more “ugly” solution - we’ll swap Node values. If Node id’s are final, we have to mess up the id’s. If not final, we could swap both values and id’s.</p>\n<p>NOTE: we must assume given node is not the tail.</p>\n<pre><code class=\"lang-java\">public class Coderview {\n\n    public static Node delete(Node root, Node node) {\n\n        // Special case: we want to delete root node.\n        if (node == root) {\n            if (root.getNext() == null) {\n                throw new IllegalArgumentException(&quot;Can&#39;t delete only node in list.&quot;);\n            }\n            Node newRoot = root.getNext();\n            root.setNext(null);\n            return newRoot;\n        }\n\n        // Other case: node is in middle or the last node.\n        Node previous = root;\n        while (previous != null &amp;&amp; previous.getNext() != node) {\n            previous = previous.getNext();\n        }\n\n        if (previous == null) {\n            throw new IllegalArgumentException(&quot;Given node does not exist in list.&quot;);\n        }\n\n        // Node will be garbage collected.\n        previous.setNext(node.getNext());\n        return root;\n    }\n}\n</code></pre>\n<pre><code class=\"lang-java\">public class Coderview {\n\n    /**\n     * Only handles nodes that aren&#39;t the tail.\n     * Also messes up id&#39;s since it only swaps values, not actual nodes.\n     */\n    public static void delete(Node node) {\n        if (node == null || node.getNext() == null) {\n            throw new IllegalArgumentException(&quot;Bad argument.&quot;);\n        }\n\n        node.setValue(node.getNext().getValue());\n        node.setNext(node.getNext().getNext());\n    }\n}\n</code></pre>\n<pre><code class=\"lang-java\">public class Node {\n\n    private final int id;\n    private Node next;\n    private int value;\n\n    public Node(int id, int value) {\n        this.id = id;\n        this.value = value;\n    }\n\n    public Node getNext() {\n        return next;\n    }\n\n    public void setNext(Node next) {\n        this.next = next;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public int getValue() {\n        return value;\n    }\n\n    public void setValue(int value) {\n        this.value = value;\n    }\n}\n</code></pre>\n"}}}}
