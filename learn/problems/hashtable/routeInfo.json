{"path":"learn/problems/hashtable","templateID":1,"sharedPropsHashes":{},"localProps":{"node":{"route":"hashtable","text":"Hashtable","children":[{"text":"Implement","slug":"hashtable-implement","fullPath":"/learn/problems/hashtable/hashtable-implement","content":{"title":"Implement a hashtable","slug":"hashtable-implement","contents":"<h3 id=\"solution\">Solution</h3>\n<p>Implement a generic Hashnode&lt;K, V&gt; class and store hashtable in a Hashnode&lt;K, V&gt;[]. Handle collisions by making linked lists (linear probing).</p>\n<h3 id=\"discussion\">Discussion</h3>\n<p><em>Linear vs. quadratic probing</em></p>\n<p>a.  Linear probing leads to bigger clusters, and clusters reduce speed. A bad hash function can lead to\nreally nasty clusters. However, with a good hash function which is good at avoiding collisions, linear\nprobing is faster due to cache locality.</p>\n<p>b.  Quadratic probing reduces cluster size, and this is good for speed, if you have problems with\ncollisions. If you don’t, then it’s slower.</p>\n<p><em>Power-of-two vs. prime size</em></p>\n<p>a.  Prime table size spreads out the keys more evenly in the table which avoids clustering. Clustering makes\nthe algorithm slow, especially with linear probing.</p>\n<p>b.  Power-of-two table size does not spread out as good as a prime table with a bad hash function. However,\na good one will spread well anyway, and we can avoid using modulo operations (expensive) and use a cheaper\noperation (bit mask).</p>\n<pre><code class=\"lang-java\">/*\n * A power-of-two hashtable using linear probing.\n */\npublic class HashTable&amp;lt;K, V&amp;gt; {\n\n    // 16 and 0.75 taken from real HashMap.\n    private static final int INITIAL_CAPACITY = 16;\n    private static final double LOAD_FACTOR = 0.75;\n    private HashNode&amp;lt;K, V&amp;gt;[] table;\n    private int size;\n\n    public HashTable() {\n        table = new HashNode[INITIAL_CAPACITY];\n        size = 0;\n    }\n\n    public V get(K key) {\n        int index = hashIndex(key);\n\n        for (Hashnode&amp;lt;K, V&amp;gt; node = table[index]; node != null; node = node.next) {\n            if (key.equals(node.key)) {\n                return node.value;\n            }\n        }\n        return null;\n    }\n\n    public void put(K key, V value) {\n        if (size &gt;= LOAD_FACTOR * table.length) {\n            resize();\n        }\n\n        int index = hashIndex(key);\n        Hashnode&amp;lt;K, V&amp;gt; newNode = new Hashnode&amp;lt;&gt;(key, value);\n\n        if (table[index] == null) {\n            table[index] = newNode;\n        } else {\n            Hashnode&amp;lt;K, V&amp;gt; node = table[index];\n            while (node.next != null) {\n                node = node.next;\n            }\n            node.next = newNode;\n        }\n        size++;\n    }\n\n    private void resize() {\n        HashNode[] newTable = new HashNode[table.length * 2];\n\n        for (int i = 0; i &lt; table.length; i++) {\n            newTable[i] = table[i];\n        }\n\n        table = newTable;\n    }\n\n    private int hashIndex(K key) {\n        int h = 0;\n        h = key.hashCode() ^ (h &gt;&gt;&gt; 16);\n\n        // To find a bucket from a hash --&gt; use AND instead of modulo (expensive).\n        return (table.length - 1) &amp; h;\n    }\n\n    public int size() {\n        return size;\n    }\n\n    private class HashNode&amp;lt;K, V&amp;gt; {\n\n        private HashNode&amp;lt;K, V&amp;gt; next;\n        private K key;\n        private V value;\n\n        public HashNode(K key, V value) {\n            this.key = key;\n            this.value = value;\n        }\n    }\n}\n</code></pre>\n"}}],"fullPath":"/learn/problems/hashtable"}}}
