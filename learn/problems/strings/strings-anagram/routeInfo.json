{"template":"/Users/Nina/git/code-yay/src/components/LearnNode.tsx","sharedHashesByProp":{},"data":{"node":{"text":"Anagram","slug":"strings-anagram","fullPath":"/learn/problems/strings/strings-anagram","content":{"title":"Anagram","slug":"strings-anagram","contents":"<h3 id=\"description\">Description</h3>\n<p>Write a function to determine if one String is an anagram of another (anagram = shuffled chars).</p>\n<h3 id=\"solution-1\">Solution #1</h3>\n<p>Use some sort (quicksort, mergesort etc.) and compare.</p>\n<p>Complexity --&gt; O(2 * N log N + N) =  O(N log N)  time and O(1) space.</p>\n<h3 id=\"solution-2\">Solution #2</h3>\n<p>Compare both Strings against an array of found chars. Must assume a low number of chars (like ASCII), otherwise too much space usage.</p>\n<p>Complexity --&gt; O(2N) = O(N) time and O(1) space.</p>\n<h3 id=\"solution\">Solution</h3>\n<pre><code class=\"language-java\">public class Codeyay {\n\n    public static boolean isAnagram(char[] first, char[] second) {\n        if (first.length != second.length || first.length == 0) {\n            return false;\n        }\n\n        // O(2 * N log N).\n        Arrays.sort(first);\n        Arrays.sort(second);\n\n        // O(N).\n        for (int i = 0; i &lt; first.length; i++) {\n            if (first[i] != second[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}</code></pre>\n<pre><code class=\"language-java\">public class Codeyay {\n\n    public static boolean isAnagram(char[] first, char[] second) {\n        if (first.length != second.length || first.length == 0) {\n            return false;\n        }\n\n        int[] charCounts = new int[256];\n        int nrOfUniqueChars = 0;\n        int completedChars = 0;\n\n        // Go through first array --&gt; O(N).\n        for (int i = 0; i &lt; first.length; i++) {\n            if (charCounts[first[i]] == 0) {\n                nrOfUniqueChars++;\n            }\n\n            charCounts[first[i]]++;\n        }\n\n        // Check second against first array --&gt; O(N).\n        for (int i = 0; i &lt; second.length; i++) {\n\n            // Not an anagram if we find a char in second which isn&#39;t present in first.\n            if (charCounts[second[i]] == 0) {\n                return false;\n            }\n\n            // For every found char, the count is reduced.\n            charCounts[second[i]]--;\n\n            // We&#39;re done if all unique chars have been found.\n            if (charCounts[second[i]] == 0) {\n                completedChars++;\n                if (completedChars == nrOfUniqueChars) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n}</code></pre>\n"}}},"path":"learn/problems/strings/strings-anagram"}
