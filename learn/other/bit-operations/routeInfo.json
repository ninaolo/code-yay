{"path":"learn/other/bit-operations","templateID":2,"sharedPropsHashes":{},"localProps":{"node":{"text":"Bit operations","slug":"bit-operations","fullPath":"/learn/other/bit-operations","content":{"title":"Bit operations","slug":"bit-operations","contents":"<h3 id=\"and\">AND</h3>\n<ul>\n<li>0 if ANY bit is 0</li>\n<li>1 otherwise</li>\n</ul>\n<pre><code class=\"lang-java\">int a = 60; // 00111100\nint b = 13; // 00001101\n\n// Result: a AND b = 00001100 = 12.\nint c = a &amp; b;\n\n// Use case 1: check a certain bit.\nint checker = 8; // 00001000\nif ((b &amp; checker) &gt; 0) {\n    System.out.println(&quot;Bit nr 3 is 1.&quot;);\n} else {\n    System.out.println(&quot;Bit nr 3 is 0.&quot;);\n}\n\n// Use case 2: insert 0 somewhere.\nint insert = 254; // 11111110\nint d = b &amp; insert; // 00001100 = 12\n</code></pre>\n<h3 id=\"or\">OR</h3>\n<ul>\n<li>1 if first OR second bit is 1</li>\n<li>0 otherwise</li>\n</ul>\n<pre><code class=\"lang-java\">int a = 60; // 00111100\nint b = 13; // 00001101\n\n// Result: a OR b = 00111101 = 61.\nint c = a | b;\n\n// Use case: insert 1 somewhere.\nint insert = 1; // 00000001\nint d = a | insert; // 00111101 = 61\n</code></pre>\n<h3 id=\"xor-exclusive-or\">XOR - Exclusive OR</h3>\n<ul>\n<li>1 if both bits are exclusive (10 or 01)</li>\n<li>0 otherwise</li>\n</ul>\n<pre><code class=\"lang-java\">int a = 60; // 00111100\nint b = 13; // 00001101\n\n// Result: a XOR b = 00110001 = 49.\nint c = a ^ b;\n</code></pre>\n<h3 id=\"not\">NOT</h3>\n<ul>\n<li>Get the inverse of a binary number</li>\n<li>Important: sign bit is also included, so the number switches sign</li>\n</ul>\n<pre><code class=\"lang-java\">int a = 60; // 00111100\n\n// Result: NOT a = 1...11000011 = -61.\nint c = ~a;\n</code></pre>\n<h3 id=\"shift\">SHIFT</h3>\n<ul>\n<li>Shifts bits N steps to the left/right</li>\n</ul>\n<pre><code class=\"lang-java\">int a = 60; // 00111100\nint b = 13; // 00001101\n\nint c = a &lt;&lt; 2; // 11110000 = 240\nint d = a &gt;&gt; 2; // 00001111 = 15\n</code></pre>\n"}}}}
